/*
 * Disq
 *
 * MIT License
 *
 * Copyright (c) 2018 Disq contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.disq_bio.disq;

import htsjdk.samtools.TbiEqualityChecker;
import htsjdk.samtools.util.RuntimeIOException;
import htsjdk.tribble.index.IndexFactory;
import htsjdk.tribble.index.tabix.TabixIndex;
import htsjdk.tribble.util.TabixUtils;
import htsjdk.variant.vcf.VCFCodec;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import junitparams.JUnitParamsRunner;
import junitparams.Parameters;
import org.disq_bio.disq.impl.formats.vcf.VcfFormat;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(JUnitParamsRunner.class)
public class TbiMergingTest extends BaseTest {

  private Object[] parametersForTest() throws IOException {
    String dir = "src/test/resources";
    Object[] objects =
        Files.walk(Paths.get(dir))
            .filter(p -> p.toString().endsWith(".vcf.bgz"))
            .filter(p -> size(p) > 64 * 1024)
            .toArray();
    Assert.assertTrue(objects.length > 0);
    return objects;
  }

  private static long size(Path p) {
    try {
      return Files.size(p);
    } catch (IOException e) {
      throw new RuntimeIOException(e);
    }
  }

  @Test
  @Parameters
  public void test(String inputFile) throws Exception {
    String inputPath = getPath(inputFile);

    long inputFileLength = new File(inputPath).length();
    int splitSize = (int) (inputFileLength + 1) / 3; // three part files
    HtsjdkVariantsRddStorage htsjdkVariantsRddStorage =
        HtsjdkVariantsRddStorage.makeDefault(jsc).splitSize(splitSize);
    HtsjdkVariantsRdd htsjdkVariantsRdd = htsjdkVariantsRddStorage.read(inputPath);

    String outputPath =
        createTempPath(
            VcfFormat.fromFormatWriteOption(VariantsFormatWriteOption.VCF_BGZ).getExtension());
    htsjdkVariantsRddStorage.write(htsjdkVariantsRdd, outputPath, TabixIndexWriteOption.ENABLE);

    File outputVcf = new File(URI.create(outputPath));
    File outputTbi =
        new File(outputVcf.getParent(), outputVcf.getName() + TabixUtils.STANDARD_INDEX_EXTENSION);
    String outputTbiHtsjdkPath = createTempPath(TabixUtils.STANDARD_INDEX_EXTENSION);
    File outputTbiHtsjdk = indexVcf(outputVcf, new File(URI.create(outputTbiHtsjdkPath)));

    // Don't check for strict equality (byte identical), since the TBI files
    // generated by htsjdk and Disq have one difference: the final virtual
    // file position in the last bin is at the end of the empty BGZF block
    // in TBI files generated by htsjdk, and is at the start of the empty block
    // for those generated by Disq.
    TbiEqualityChecker.assertEquals(outputVcf, outputTbiHtsjdk, outputTbi, false);
  }

  private static File indexVcf(File vcf, File tbi) throws IOException {
    TabixIndex tabixIndex = IndexFactory.createTabixIndex(vcf, new VCFCodec(), null);
    tabixIndex.write(tbi);
    return tbi;
  }
}
